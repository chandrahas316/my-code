from flask import Flask, jsonify,request, make_response
#from flask_ngrok import run_with_ngrok
import pytesseract
from PIL import Image
import requests
from io import BytesIO
import json
# from pyngrok import ngrok

api_key = "Bearer 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"

headers = {
    "Content-Type": "application/json",
    "Authorization": api_key,
}

app = Flask(__name__)
#run_with_ngrok(app)

@app.route("/img_to_text", methods = ['GET','POST'])
def image_to_text():
    try:
        try:
            json_data = json.loads(request.form['data'])
            image_file = request.files['image']
            lang = json_data.get("lang")
        except Exception as e:
            print("input data error ",str(e))
        try:
            image_bytes = image_file.read()
            image = Image.open(BytesIO(image_bytes))
            text = pytesseract.image_to_string(image, lang = lang)
            print(text)
        except Exception as e:
            print("tesseract error - ", str(e))

        query = f'''
            You are an agricultural expert, you will given a soil health data of an area which has 12 parameters with values of it,  Suggest all your insights on this data like what crops can be yielded, what fertilizer can be used and other suitable factors in a way farmer can understand in simple language. Give a brief explanation summarizing all the parameters so that it wont be long and complex. Do Not give each parameter explanation, instead give what farmer can do in an overall perspective as a paragraph only with no headings. Keep it short and informative. Do not use too many technical terms since a farmer cant understand them. Below are the generalized segregation of the parameters I mentioned,

              Nitrogen -
              -> low(<280 kg/ha)
              -medium (280-560 kg/ha)
              -high(>560 kg/ha)

              Phosphorous -
              -low(<10 kg/ha)
              -medium(10-25 kg/ha)
              -high(>25 kg/ha)

              Potassium -
              -low(<120 kg/ha)
              -medium(120-280 kg/ha)
              -high(>280 kg/ha)

              Boron -
              -sufficient(>0.5 ppm)
              -deficient(<0.5 ppm)

              Iron -
              -sufficient (>4.5 ppm)
              -deficient(<4.5 ppm)

              zinc -
              - sufficient (>0.6 ppm)
              - deficient(<0.6 ppm)

              Copper -
              - sufficient(>0.2 ppm)
              - deficient(<0.2 ppm)

              Sulphur -
              - Sufficient(>10.0 ppm)
              - deficient(<10.0 ppm)

              Organic carbon -
              - low(<0.50%)
              - medium(0.5 - 0.75%)
              - high(>0.75%)

              pH -
              - strongly acidic (<4.5)
              - moderately acidic (4.5 - 5.5)
              - Slightly acidic (>5.5 - 6.5)
              - Normal (>6.5 - 7.5)
              - slightly alkaline (>7.5-8.5)
              - moderately alkaline (sodic) (>8.5-9.5)
              - strongly alkaline (highly sodic) (>9.5)

              Electrical conductivity -
              - non saline (0-1.68 dS/m)
              - low salinity (1.68 - 3.36 dS/m)
              - Mild salinity (3.36 - 6.72 dS/m)
              - High salinity (6.72 - 13.44 dS/m)
              - sever salinity (>13.44 dS/m)

              Manganese -
              - sufficient(>2.0 ppm)
              - deficient(<2.0 ppm)

              Consider these values are defined range of each parameter. Now the soil data for the 12 parameters will be given in double quotes (" ") and keep the terminology in such a way that a farmer can understand.

              "
              {text.strip()}
              "
              This data is actually generated by OCR from an image. Text is taken from tables present in image. re construct this text in a farmer understandable way. Keep the paragraph brief. Use abbreviated terms of all units present in the text.
        '''
        print("this is the query - \n", query)
        data = {
            "messages": [{"role": "user", "content": query}],
            "model": "mixtral-8x7b-32768",
            "temperature": 1,
            "max_tokens": 1024,
            "top_p": 1,
            "stream": False,
            "stop": None,
        }
        proxy = {'http_proxy': 'http://proxy.tcs.com:8080','https_proxy': 'http://proxy.tcs.com:8080'}
        response = requests.post("https://api.groq.com/openai/v1/chat/completions", headers=headers, json=data, proxies = proxy)
        for line in response.iter_lines():
            print(line.decode('utf-8'))

        response_text = response.json()['choices'][0]['message']['content']
        return make_response(jsonify({"text": response_text}))
    except Exception as e:
        print(str(e))

app.route("/")
def landing_page():
    return "Soil health card backend"

if __name__ == '__main__':
    app.run(port=5000, debug=True)